use_r("ttests2s.mv")
library(usethis)
use_r("ttests2s.mv")
use_r("ttests2s.mv.R")
use_r("print.ttests2s.mv.R")
use_r("summary.ttests2s.mv.R")
use_r("Levenetests2s.mv.R")
use_r("print.Levenetests2s.mv.R")
use_r("summary.Levenetests2s.mv.R")
use_r("Hotelling.mat.R")
use_r("print.Hotelling.mat.R")
use_r("summary.Hotelling.mat.R")
use_r("LeveneT2.R")
use_r("print.LeveneT2.R")
use_r("summary.LeveneT2.R")
use_r("VanValen.R")
use_r("print.VanValen.R")
use_r("summary.VanValen.R")
use_r("MANOVA.mat.R")
use_r("print.MANOVA.mat.R")
use_r("summary.MANOVA.mat.R")
use_r("BoxM.F.R")
use_r("print.BoxM.F.R")
use_r("summary.BoxM.F.R")
devtools::load_all(".")
library(available)
install.packages("available")
library(available)
available("smstests")
setwd("C:/Users/ganav/Documents/RPackages/smstests/data")
sparrows <- read.csv("Bumpus_sparrows.csv", header=TRUE,
stringsAsFactors = TRUE)
save(sparrows, file = "sparrows.rda")
skulls <- read.csv("Egyptian_skulls.csv", header=TRUE,
stringsAsFactors = TRUE)
save(skulls, file = "skulls.rda")
library("datasets")
data(sparrows)
setwd("C:/Users/ganav/Documents/RPackages/smstests/data")
data(sparrows)
load(sparrows)
load(file = "sparrows.rda")
sparrows
usethis::use_mit_license()
devtools::load_all("C:/Users/ganav/Documents/RPackages/smstests")
pkgbuild::check_build_tools(debug = TRUE)
devtools::load_all(".")
install.packages("devtools")
usethis::use_mit_license()
pkgbuild::check_build_tools(debug = TRUE)
library(devtools)
install.packages("devtools")
install.packages("tinytex")
tinytex::install_tinytex()
reinstall_tinytex()
usethis::use_readme_rmd()
citation("smstests")
library(readr)
install.packages("readr")
library(usethis)
library(readr)
library(glue)
library(devtools)
usethis::use_data_raw("sparrows")
## code to prepare `sparrows` dataset goes here
usethis::use_data(sparrows, overwrite = TRUE)
## code to prepare `sparrows` dataset goes here
sparrows <- read.csv("../Bumpus_sparrows.csv", header=TRUE,
stringsAsFactors = TRUE)
usethis::use_data(sparrows, overwrite = TRUE)
readr::spec(sparrows)
spec(sparrows)
## code to prepare `sparrows` dataset goes here
sparrows <- read.csv("../Bumpus_sparrows.csv", header=TRUE,
stringsAsFactors = TRUE)
sparrows$Total_length <- as.numeric(sparrows$Total_length)
sparrows$Alar_extent <- as.numeric(sparrows$Alar_extent)
usethis::use_data(sparrows, overwrite = TRUE)
usethis::use_r("sparrows")
library(biotools)
devtools::document()
help(sparrows)
devtools::document()
devtools::document()
help(sparrows)
data(sparrows)
str(sparrows)
usethis::use_data_raw("skulls")
usethis::use_data_raw("skulls")
## code to prepare `skulls` dataset goes here
skulls <- read.csv("Egyptian_skulls.csv", header = TRUE,
stringsAsFactors = TRUE)
## code to prepare `skulls` dataset goes here
skulls <- read.csv("../Egyptian_skulls.csv", header = TRUE,
stringsAsFactors = TRUE)
usethis::use_data(skulls, overwrite = TRUE)
## code to prepare `skulls` dataset goes here
skulls <- read.csv("../Egyptian_skulls.csv", header = TRUE,
stringsAsFactors = TRUE)
skulls$Maximum_breadth <- as.numeric(skulls$Maximum_breadth)
skulls$Basibregmatic_height <- as.numeric(skulls$Basibregmatic_height)
skulls$Basialveolar_length <- as.numeric(skulls$Basialveolar_length)
skulls$Nasal_height <- as.numeric(skulls$Nasal_height)
usethis::use_data(skulls, overwrite = TRUE)
usethis::use_r("skulls")
devtools::document()
help(skulls)
devtools::document()
help(skulls)
str(skulls)
devtools::document()
data(sparrows)
sparrows
help("ttests2s.mv")
help("ttests2s.mv")
data(sparrows)
ttests.sparrows <- ttests2s.mv(sparrows, group = Survivorship, level1 = "S",
var.equal = TRUE, P.adjust = "bonferroni")
summary(ttests.sparrows)
summary.ttests(ttests.sparrows)
usethis::use_package("Hotelling")
usethis::use_package("biotools")
usethis::use_package("data.table")
usethis::use_package("stringr")
summary(ttests.sparrows)
print(ttests.sparrows)
help("summary.ttests")
help("summary.ttests")
summary(ttests.sparrows)
summary.ttests(ttests.sparrows)
usethis::use_package_doc()
devtools::document()
devtools::load_all(".")
?BoxM.F
install.packages("testthat")
usethis::use_testthat()
usethis::use_test("ttests2s.mv")
usethis::use_test("ttests2s.mv.R")
ttests.sparrows <- ttests2s.mv(sparrows, group = Survivorship, level1 = "S",
var.equal = TRUE, P.adjust = "bonferroni")
summary.ttests(ttests.sparrows)
ttests2s.mv(sparrows, group = Survivorship, level1 = "S")
summary.ttests(ttests2s.mv(sparrows, group = Survivorship, level1 = "S"))
devtools::document()
help(BoxM.F)
args(summary)
devtools::document()
summary(ttests.sparrows)
data(sparrows)
ttests.sparrows <- ttests2s.mv(sparrows, group = Survivorship, level1 = "S",
var.equal = TRUE, P.adjust = "bonferroni")
summary(ttests.sparrows)
library(roxygen2)
print(sparrows.ttests)
print(ttests.sparrows)
help("ttests2s.mv")
data(sparrows)
ttests.sparrows <- ttests2s.mv(sparrows, group = Survivorship, level1 = "S",
var.equal = TRUE, P.adjust = "bonferroni")
summary(ttests.sparrows)
summary.ttests(ttests.sparrows)
summary(ttests.sparrows)
data(sparrows)
ttests.sparrows <- ttests2s.mv(sparrows, group = Survivorship, level1 = "S",
var.equal = TRUE, P.adjust = "bonferroni")
summary(ttests.sparrows)
data(sparrows)
ttests.sparrows <- ttests2s.mv(sparrows, group = Survivorship, level1 = "S",
var.equal = TRUE, P.adjust = "bonferroni")
summary(ttests.sparrows)
methods("summary")
?methods
methods(class = "nls")
print(summary.glm)
print(summary.lm)
print(summary.manova)
install.packages("vegan")
data(sparrows)
ttests.sparrows <- ttests2s.mv(sparrows, group = Survivorship, level1 = "S",
var.equal = TRUE, P.adjust = "bonferroni")
summary(ttests.sparrows)
summary.ttests(ttests.sparrows)
devtools::load_all(".")
?smstests-package
??smstests-package
data(sparrows)
ttests.sparrows <- ttests2s.mv(sparrows, group = Survivorship, level1 = "S",
var.equal = TRUE, P.adjust = "bonferroni")
summary.ttests(ttests.sparrows)
print(ttests.sparrows)
usethis::use_agpl3_license()
usethis::use_gpl3_license()
??smstests-package
usethis::use_gpl3_license()
usethis::use_mit_license()
#' @examples
#' data(sparrows)
#' results.T2 <- Hotelling.mat(sparrows, group = Survivorship, level1 = "S")
#' # Brief output
#' summary.T2(results.T2)
#'
#' @import data.table
#' @importFrom stats aggregate pf var
#' @export Hotelling.mat
#'
Hotelling.mat <- function(x, group, level1) {
group <- deparse(substitute(group))
T2.list <- vector(mode = 'list', length = 10)
dt <- data.table :: as.data.table(x)
result <- dt[, var(.SD), by = group]
result <- as.matrix(result$V1)
fac <- as.factor(x[, names(x) %in% c(group)])
fac <- droplevels(fac)
levels.group <- c(level1, levels(fac)[levels(fac) != level1])
df <- x[,!names(x) %in% c(group)]
p <- df.numF <- ncol(df)
vmeans <- aggregate(df, list(Group = fac), FUN = "mean")
rownames(vmeans) <- levels(fac)
names.matcv <- c(level1, levels(fac)[levels(fac) != level1])
CVs <- array(result, dim = c(p, p, 2),
dimnames = list(names(df), names(df), names.matcv))
T2.list[[1]] <- vmeans[vmeans$Group == level1, -1]
T2.list[[2]] <- CVs[, , level1]
T2.list[[3]] <- vmeans[vmeans$Group != level1, -1]
T2.list[[4]] <- CVs[, , levels(fac)[levels(fac) != level1]]
n1 <- length(fac[fac == level1])
n2 <- length(fac[fac != level1])
C1 <- T2.list[[2]]
C2 <- T2.list[[4]]
denom <- n1 + n2 - 2
C <- ((n1 - 1)*C1 + (n2 - 1)*C2)/denom
T2.list[[5]] <- C
T2.list[[6]] <- solve(C)
x1bar <- t(T2.list[[1]])
x2bar <- t(T2.list[[3]])
inv.C <- T2.list[[6]]
T2 <- as.vector(n1 * n2 * t(x1bar - x2bar) %*% inv.C %*%
(x1bar - x2bar)/(n1 + n2))
T2.list[[7]] <- T2
df.denF <- n1 + n2 - p - 1
F.stat <- as.vector(df.denF * T2/((n1 + n2 - 2) * p))
df.F <- c(df.numF, df.denF)
T2.list[[8]] <- F.stat
T2.list[[9]] <- df.F
p.value <- pf(F.stat, df.numF, df.denF, lower.tail = FALSE)
T2.list[[10]] <- p.value
names(T2.list) <- c(paste("Mean vector:"),
paste("Covariance matrix, C1:", level1),
paste("Mean vector:"),
paste("Covariance matrix, C2:",
levels(fac)[levels(fac) != level1]),
"Pooled covariance matrix, C",
"Inverse of C",
"Hotelling's T2 statistic",
"F statistic",
"Degrees of freedom",
"P-value")
results.T2 <- list(name = "Hotelling's T2 test", T2.list = T2.list,
group = group, levels.group = levels.group,
data.name = deparse(substitute(x)), data = x)
class(results.T2) <- "T2"
return(results.T2)
}
devtools::document()
rm(list = c("Hotelling.mat"))
devtools::document()
data(skulls)
res.MANOVA <- MANOVA.mat(skulls, group = Period)
# Brief output
print(res.MANOVA)
class(res.MANOVA)
class(res.MANOVA$levels.group)
data(skulls)
res.MANOVA <- MANOVA.mat(skulls, group = Period)
# Brief output
print(res.MANOVA)
data(skulls)
res.MANOVA <- MANOVA.mat(skulls, group = Period)
# Brief output
print(res.MANOVA)
class(res.MANOVA$levels.group)
data(skulls)
res.MANOVA <- MANOVA.mat(skulls, group = Period)
# Brief output
print(res.MANOVA)
git init
git remote add origin https://github.com/ganava4/smstests
library(devtools)
git init
library(usethis)
usethis::create_github_token()
usethis::create_github_token()
